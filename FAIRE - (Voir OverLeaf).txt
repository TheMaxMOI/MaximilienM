Résumé : A S'Y TENIR !
L'utilisateur fournit une ville --> graphe complet
L'utilisateur fournit des moyens de transports et leurs vitesse en fonction des arrêts --> pour chaque transport il y a des restrictions sur le graphe / et fonction poids qui leur est propre
L'utilisateur fournit un point de départ, un point d'arrivé et des points d'intérêt --> 2 points, et une collection de points munie d'un fonction intérêt qui le quantifie

A DISPOSITION : 
Internet
T.Pochart
La feuille du 11/09 dans le carnet
Le programme minimise le temps de trajet en manipulant l'enchainement des moyens de transports. 
Il fournit en sortie un trajet lié à un enchainement de moyens de transports.

A RECHERCHER : 
1.Qui sont et comment fonctionne les app de road trip ?
2.Se renseigner sur la fonction de minimisation.
(On sait déjà qu'elle dépend du temps donc du moyens de transport entre 2 points d'intérêt et qu'elle de l'intérêt combiné en 2 points d'intérêt et ce pour tout arrêtes)

Réponses aux recherches:
1. Qui : Rome2rio
Voir travel (meta)search engine
Comment : On donne une liste de lieux dans un ordre fixé, le site trouve le chemin le plus court en empruntant les modes de transports les plus adaptés.
2. Ici, ce qu'on veut en plus c'est renvoyé le chemin le plus court en empruntant tout en prenant en compte l'intérêt porté à chaque lieu.
On a construit un A* modifié qui a pour but de minimiser la distance entre tout les points d'intérêt. (Repose sur "Tout point d'un plus court chemin fournit un plus court chemin depuis une extrémité du chemin")
Il faut un A* modifié minimise la distance entre les points d'intérêt en fonction des divers moyens de transport et intérêt de chaque point.

A IMPLEMENTER : 
1.Les moyens de transport
2.La fonction intérêt
3.La fonction de minimisation
La combinaison des intérêts

Implémentation:
1. Les moyens de transport sont des fonctions poids. Pour chaque type, pour tenir compte des endroits inaccessibles (en dehors des obstacles de toute la ville) la fonction poids renvoit 'infini' en ces endroits.
exemples :
 - à pieds : lent (poids fort), accès à tout
 - en voiture : rapide (poids faible), accès à presque tout (pkp que les axes verticaux et horizontaux)
 - en tram/métro : très rapide (poids assez faible), accès très restreint (mais plrs lignes)
On définit alors une fonction
2. Les intérêts (i_k) de chaque point (p_k) fournis sont quantifiés (à préciser).
La fonction intérêt I prend en entrer i_n,i_m (qu'on assimile à p_n,p_m).
On décide que l'on a pas d'intérêt de rester au même endroit --> I(i_n,i_m) = 0 (ou très petit)
On décide qu'on a plus intérêt à aller vers le point d'intérêt le plus élevé --> I(i_n,i_m) = expr
On décide que si les intérêts sont les mêmes, il est plus intéressant de regarder ce qu'aurait dans tel où tel cas (sinon choix aléatoire/par défaut)
3. On suppose I la fonction intérêt bien définie.
Puisqu'on veut aller à l'endroit le plus proche (selon ce qui faut) où l'intérêt est le plus élévé, et comme I croit en fonction de l'intérêt et D croit en fonction de la proximité.
On minimise I^(-x)*D^(y) où x,y sont des poids positifs qui sont A CHOISIR.
Question : Est-ce qu'à chaque fois en un point p_k, je cherche le point p_m et le moyen de transport tel que [I^(-x)*D^(y)](p_k,p_m) soit minimal ?
  Ou bien  Est-ce que on cherche l'ordre des points et les transports qui minimise la somme des [I^(-x)*D^(y)](p_k,p_l) ?
|--> Réponse : On fait le 2eme truc c'est plus intéressant car le 1er est finalement plus restreint : on considère moins de cas, car on ne bénéficie plus du Thm "Tout point d'un plus court chemin fournit un plus court chemin depuis une extrémité du chemin".


25/09/24
On refait le programme.
On change du graphe en coordonnées en étiquettes (uniques).
Cela implique :
- de refaire les programmes de générations <-- OK c'était déjà le cas
- de légèrement changer les algo de parcours
- de changer la fonction d'affichage
- Surtout de changer les fonctions poids.
Pour une fonction poids donnée w, pour i,j des étiquettes w[i,j] renvoie le poids de l'arrête i,j. Pour rappel les fonctions poids sont données par l'utilisateur (donc générées avant les calculs)
Pour info on les refait en implémentant les modes de transport décrits.
Durant l'implémentation on se rend compte que le métro peut passer à "sous les immeubles" (obstacles); on fournit à sa fonction poids l'ensemble des points où lignes de métro passent donc le graphe à considérer est plus grand.

02/10/24
Les poids sont implémentés. On note qu'il est nécessaire que les lignes de métro soient accessibles par d'autres moyen de transport, ie les lignes de métro est rattachée par d'autres arrêtes.
En l'état :
- de refaire les programmes de générations <-- OK c'était déjà le cas
- Surtout de changer les fonctions poids <-- OK c'est fait
- de légèrement changer les algo de parcours
  • A* <-- c'est fait, ça fonctionne en théorie
  • ...
- de changer la fonction d'affichage

On refait multi_A* (on va surement la renommer). Cette fonction devra résoudre le problème.
--> Reprise des idées, des recheches, des cours d'info similaire.
D'après transp-or.epfl.ch/optimization/slides/08-graphes.pdf on aurait un problème sur un graphe "virtuelle" qui a des répercutions sur le graphe physique : la ville. voir les slides 26-35
Si l'analyse du doc est correcte, notre histoire de minimalisation se résume par le problème de transbordement (Transshipment problem) en utilisant :
  a_ij = I(i,j)     (*)
  b_ij = 0
  c_ij = 1 (ou majoré par max(w_k[i,j]))
  s_0 = 1
  s_f = -1
  et b_ij <= x_ij <=c_ij où x_ij=w[i,j] avec w[i,j] le meilleur temps associé à un moyen de transport.    (*)

09/10/24
donc x_ij compris entre 0 et 1

On a 3 imprécisions qui nous empêche de calquer ce qui nous a été présenté dans le doc.
2 liées au poids :
-on a définit w[i,j] pour i proche de j alors qu'on le veut pour i,j quelconque (après réflexion on peut pte le faire que pour i,j des étiquettes de points d'intérêt quelconque)
-on a définit une fonction poids w_k pour chacun des moyens de transport (on choisira le poids le plus faible et on indiquera le moyen de transport utilisé :ok) mais comme x_ij=w[i,j] et qu'on a pas tenu compte de l'encadredement il faut réduire proportionellement les poids pour que max(w[i,j])<=1
1 liée à la fonction intérêt I : 
-Dans l'idée on fournit au programme une to do list de lieu à visiter (des points d'intérêt), c'est une liste classé (admettons du plus au moins important à voir). Comment passer à une fonction I(i,j) où i,j sont des étiquettes de ces lieux

(*) Même si le problème de transbordement prend pour les a_ij la distance/le cout entre i et j nous on met l'inverse de l'intérêt, nous ce qui nous préoccupe c'est de trouver la combinaison de x_ij minimal ie les poids sur les arrêtes ij données.
Faisons ce programme qui résout le problème de transbordement.
On le simplifiera pour notre cas et on adaptera les trucs existants.